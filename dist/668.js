"use strict";(self.webpackChunkvolumetric_atmospheric_scattering=self.webpackChunkvolumetric_atmospheric_scattering||[]).push([[668],{9668:(t,e,r)=>{r.r(e),r.d(e,{_TGATextureLoader:()=>s});var a=r(8423);function i(t){let e=0;return{id_length:t[e++],colormap_type:t[e++],image_type:t[e++],colormap_index:t[e++]|t[e++]<<8,colormap_length:t[e++]|t[e++]<<8,colormap_size:t[e++],origin:[t[e++]|t[e++]<<8,t[e++]|t[e++]<<8],width:t[e++]|t[e++]<<8,height:t[e++]|t[e++]<<8,pixel_size:t[e++],flags:t[e++]}}function n(t,e){if(e.length<19)return void a.V.Error("Unable to load TGA file - Not enough data to contain header");let r=18;const n=i(e);if(n.id_length+r>e.length)return void a.V.Error("Unable to load TGA file - Not enough data");r+=n.id_length;let s,h=!1,c=!1,l=!1;switch(n.image_type){case 9:h=!0;case 1:c=!0;break;case 10:h=!0;case 2:break;case 11:h=!0;case 3:l=!0}const g=n.pixel_size>>3,f=n.width*n.height*g;let u,d,w,_,p,b,y;if(c&&(u=e.subarray(r,r+=n.colormap_length*(n.colormap_size>>3))),h){let t,a,i;s=new Uint8Array(f);let n=0;const o=new Uint8Array(g);for(;r<f&&n<f;)if(t=e[r++],a=1+(127&t),128&t){for(i=0;i<g;++i)o[i]=e[r++];for(i=0;i<a;++i)s.set(o,n+i*g);n+=g*a}else{for(a*=g,i=0;i<a;++i)s[n+i]=e[r++];n+=a}}else s=e.subarray(r,r+=c?n.width*n.height:f);switch((48&n.flags)>>4){default:case 2:d=0,_=1,y=n.width,w=0,p=1,b=n.height;break;case 0:d=0,_=1,y=n.width,w=n.height-1,p=-1,b=-1;break;case 3:d=n.width-1,_=-1,y=-1,w=0,p=1,b=n.height;break;case 1:d=n.width-1,_=-1,y=-1,w=n.height-1,p=-1,b=-1}const m="_getImageData"+(l?"Grey":"")+n.pixel_size+"bits",A=o[m](n,u,s,w,p,b,d,_,y);t.getEngine()._uploadDataToTextureDirectly(t,A)}const o={GetTGAHeader:i,UploadContent:n,_getImageData8bits:function(t,e,r,a,i,n,o,s,h){const c=r,l=e,g=t.width,f=t.height;let u,d,w,_=0;const p=new Uint8Array(g*f*4);for(w=a;w!==n;w+=i)for(d=o;d!==h;d+=s,_++)u=c[_],p[4*(d+g*w)+3]=255,p[4*(d+g*w)+2]=l[3*u+0],p[4*(d+g*w)+1]=l[3*u+1],p[4*(d+g*w)+0]=l[3*u+2];return p},_getImageData16bits:function(t,e,r,a,i,n,o,s,h){const c=r,l=t.width,g=t.height;let f,u,d,w=0;const _=new Uint8Array(l*g*4);for(d=a;d!==n;d+=i)for(u=o;u!==h;u+=s,w+=2){f=c[w+0]+(c[w+1]<<8);const t=255*((31744&f)>>10)/31|0,e=255*((992&f)>>5)/31|0,r=255*(31&f)/31|0;_[4*(u+l*d)+0]=t,_[4*(u+l*d)+1]=e,_[4*(u+l*d)+2]=r,_[4*(u+l*d)+3]=32768&f?0:255}return _},_getImageData24bits:function(t,e,r,a,i,n,o,s,h){const c=r,l=t.width,g=t.height;let f,u,d=0;const w=new Uint8Array(l*g*4);for(u=a;u!==n;u+=i)for(f=o;f!==h;f+=s,d+=3)w[4*(f+l*u)+3]=255,w[4*(f+l*u)+2]=c[d+0],w[4*(f+l*u)+1]=c[d+1],w[4*(f+l*u)+0]=c[d+2];return w},_getImageData32bits:function(t,e,r,a,i,n,o,s,h){const c=r,l=t.width,g=t.height;let f,u,d=0;const w=new Uint8Array(l*g*4);for(u=a;u!==n;u+=i)for(f=o;f!==h;f+=s,d+=4)w[4*(f+l*u)+2]=c[d+0],w[4*(f+l*u)+1]=c[d+1],w[4*(f+l*u)+0]=c[d+2],w[4*(f+l*u)+3]=c[d+3];return w},_getImageDataGrey8bits:function(t,e,r,a,i,n,o,s,h){const c=r,l=t.width,g=t.height;let f,u,d,w=0;const _=new Uint8Array(l*g*4);for(d=a;d!==n;d+=i)for(u=o;u!==h;u+=s,w++)f=c[w],_[4*(u+l*d)+0]=f,_[4*(u+l*d)+1]=f,_[4*(u+l*d)+2]=f,_[4*(u+l*d)+3]=255;return _},_getImageDataGrey16bits:function(t,e,r,a,i,n,o,s,h){const c=r,l=t.width,g=t.height;let f,u,d=0;const w=new Uint8Array(l*g*4);for(u=a;u!==n;u+=i)for(f=o;f!==h;f+=s,d+=2)w[4*(f+l*u)+0]=c[d+0],w[4*(f+l*u)+1]=c[d+0],w[4*(f+l*u)+2]=c[d+0],w[4*(f+l*u)+3]=c[d+1];return w}};class s{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(t,e,r){const a=new Uint8Array(t.buffer,t.byteOffset,t.byteLength),o=i(a);r(o.width,o.height,e.generateMipMaps,!1,(()=>{n(e,a)}))}}}}]);